// Generation parameters:
//   aws-sdk-js definitions from v2.1060.0
//   AWS service UID: sesv2-2019-09-27
//   code generation: v0.3
//   extra options:
//     "actions" = "SendEmail"
//   generated at: 2022-11-20
//   skipped 80 out of 81 actions, leaving 1

// Originally served at https://aws-api.deno.dev/v0.3/services/sesv2.ts?actions=SendEmail

// Autogenerated API client for: Amazon Simple Email Service

import * as Base64 from "https://deno.land/std@0.120.0/encoding/base64.ts";
import * as client from "https://deno.land/x/aws_api@v0.6.0/client/common.ts";
import * as jsonP from "https://deno.land/x/aws_api@v0.6.0/encoding/json.ts";
function serializeBlob(input: string | Uint8Array | null | undefined) {
  if (input == null) return input;
  return Base64.encode(input);
}

export class SESV2 {
  #client: client.ServiceClient;
  constructor(apiFactory: client.ApiFactory) {
    this.#client = apiFactory.buildServiceClient(SESV2.ApiMetadata);
  }

  static ApiMetadata: client.ApiMetadata = {
    "apiVersion": "2019-09-27",
    "endpointPrefix": "email",
    "jsonVersion": "1.1",
    "protocol": "rest-json",
    "serviceAbbreviation": "Amazon SES V2",
    "serviceFullName": "Amazon Simple Email Service",
    "serviceId": "SESv2",
    "signatureVersion": "v4",
    "signingName": "ses",
    "uid": "sesv2-2019-09-27"
  };

  /** Sends an email message. */
  async sendEmail(
    params: SendEmailRequest,
    opts: client.RequestOptions = {},
  ): Promise<SendEmailResponse> {
    const body: jsonP.JSONObject = {
      FromEmailAddress: params["FromEmailAddress"],
      FromEmailAddressIdentityArn: params["FromEmailAddressIdentityArn"],
      Destination: fromDestination(params["Destination"]),
      ReplyToAddresses: params["ReplyToAddresses"],
      FeedbackForwardingEmailAddress: params["FeedbackForwardingEmailAddress"],
      FeedbackForwardingEmailAddressIdentityArn: params["FeedbackForwardingEmailAddressIdentityArn"],
      Content: fromEmailContent(params["Content"]),
      EmailTags: params["EmailTags"]?.map(x => fromMessageTag(x)),
      ConfigurationSetName: params["ConfigurationSetName"],
      ListManagementOptions: fromListManagementOptions(params["ListManagementOptions"]),
    };
    const resp = await this.#client.performRequest({
      opts, body,
      action: "SendEmail",
      requestUri: "/v2/email/outbound-emails",
    });
    return jsonP.readObj({
      required: {},
      optional: {
        "MessageId": "s",
      },
    }, await resp.json());
  }

}

// refs: 1 - tags: named, input
/** Represents a request to send a single formatted email using Amazon SES. */
export interface SendEmailRequest {
  /** The email address to use as the "From" address for the email. */
  FromEmailAddress?: string | null;
  /** This parameter is used only for sending authorization. */
  FromEmailAddressIdentityArn?: string | null;
  /** An object that contains the recipients of the email message. */
  Destination?: Destination | null;
  /** The "Reply-to" email addresses for the message. */
  ReplyToAddresses?: string[] | null;
  /** The address that you want bounce and complaint notifications to be sent to. */
  FeedbackForwardingEmailAddress?: string | null;
  /** This parameter is used only for sending authorization. */
  FeedbackForwardingEmailAddressIdentityArn?: string | null;
  /** An object that contains the body of the message. */
  Content: EmailContent;
  /** A list of tags, in the form of name/value pairs, to apply to an email that you send using the `SendEmail` operation. */
  EmailTags?: MessageTag[] | null;
  /** The name of the configuration set to use when sending the email. */
  ConfigurationSetName?: string | null;
  /** An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe. */
  ListManagementOptions?: ListManagementOptions | null;
}

// refs: 1 - tags: named, output
/** A unique message ID that you receive when an email is accepted for sending. */
export interface SendEmailResponse {
  /** A unique identifier for the message that is generated when the message is accepted. */
  MessageId?: string | null;
}

// refs: 1 - tags: input, named, interface
/** An object that describes the recipients for an email. */
export interface Destination {
  /** An array that contains the email addresses of the "To" recipients for the email. */
  ToAddresses?: string[] | null;
  /** An array that contains the email addresses of the "CC" (carbon copy) recipients for the email. */
  CcAddresses?: string[] | null;
  /** An array that contains the email addresses of the "BCC" (blind carbon copy) recipients for the email. */
  BccAddresses?: string[] | null;
}
function fromDestination(input?: Destination | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ToAddresses: input["ToAddresses"],
    CcAddresses: input["CcAddresses"],
    BccAddresses: input["BccAddresses"],
  }
}

// refs: 1 - tags: input, named, interface
/** An object that defines the entire content of the email, including the message headers and the body content. */
export interface EmailContent {
  /** The simple email message. */
  Simple?: Message | null;
  /** The raw email message. */
  Raw?: RawMessage | null;
  /** The template to use for the email message. */
  Template?: Template | null;
}
function fromEmailContent(input?: EmailContent | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Simple: fromMessage(input["Simple"]),
    Raw: fromRawMessage(input["Raw"]),
    Template: fromTemplate(input["Template"]),
  }
}

// refs: 1 - tags: input, named, interface
/** Represents the email message that you're sending. */
export interface Message {
  /** The subject line of the email. */
  Subject: Content;
  /** The body of the message. */
  Body: Body;
}
function fromMessage(input?: Message | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Subject: fromContent(input["Subject"]),
    Body: fromBody(input["Body"]),
  }
}

// refs: 3 - tags: input, named, interface
/** An object that represents the content of the email, and optionally a character set specification. */
export interface Content {
  /** The content of the message itself. */
  Data: string;
  /** The character set for the content. */
  Charset?: string | null;
}
function fromContent(input?: Content | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: input["Data"],
    Charset: input["Charset"],
  }
}

// refs: 1 - tags: input, named, interface
/** Represents the body of the email message. */
export interface Body {
  /** An object that represents the version of the message that is displayed in email clients that don't support HTML, or clients where the recipient has disabled HTML rendering. */
  Text?: Content | null;
  /** An object that represents the version of the message that is displayed in email clients that support HTML. */
  Html?: Content | null;
}
function fromBody(input?: Body | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Text: fromContent(input["Text"]),
    Html: fromContent(input["Html"]),
  }
}

// refs: 1 - tags: input, named, interface
/** Represents the raw content of an email message. */
export interface RawMessage {
  /** The raw email message. */
  Data: Uint8Array | string;
}
function fromRawMessage(input?: RawMessage | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Data: serializeBlob(input["Data"]),
  }
}

// refs: 1 - tags: input, named, interface
/** An object that defines the email template to use for an email message, and the values to use for any message variables in that template. */
export interface Template {
  /** The name of the template. */
  TemplateName?: string | null;
  /** The Amazon Resource Name (ARN) of the template. */
  TemplateArn?: string | null;
  /** An object that defines the values to use for message variables in the template. */
  TemplateData?: string | null;
}
function fromTemplate(input?: Template | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    TemplateName: input["TemplateName"],
    TemplateArn: input["TemplateArn"],
    TemplateData: input["TemplateData"],
  }
}

// refs: 1 - tags: input, named, interface
/** Contains the name and value of a tag that you apply to an email. */
export interface MessageTag {
  /** The name of the message tag. */
  Name: string;
  /** The value of the message tag. */
  Value: string;
}
function fromMessageTag(input?: MessageTag | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    Name: input["Name"],
    Value: input["Value"],
  }
}

// refs: 1 - tags: input, named, interface
/** An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe. */
export interface ListManagementOptions {
  /** The name of the contact list. */
  ContactListName: string;
  /** The name of the topic. */
  TopicName?: string | null;
}
function fromListManagementOptions(input?: ListManagementOptions | null): jsonP.JSONValue {
  if (!input) return input;
  return {
    ContactListName: input["ContactListName"],
    TopicName: input["TopicName"],
  }
}
